15世紀にはじまった大航海時代 ヨーロッパ人がアメリカ大陸へ 進出しはじめた そののち 日本の種子島には鉄砲が伝来し それを使った織田信長が戦乱の国 をまとめます その後 豊臣秀吉徳川家康が天下 を取り ここから260年にもわたる長い江戸時代 が幕を開けました 平和が続いた日本では独自の文化 が育まれ 花札を代表するように西洋と比較 すると絵が多く書かれた娯楽が 生まれました 文化を成長させた日本に対して ヨーロッパでは実用的な技術が 発展します フランスでは哲学者としても有名な パスカルが 現存する最古の計算機パスカリーヌ を発明 コンピュータとは元々計算機を さす言葉で 今回のテーマであるプログラミング とは切っても切れない関係にあります が パスカルはこれを 税金を集める父親の仕事のために 使いたかったようです そのフランスとイギリスは新大陸 の植民地をめぐって激しく対立 1756年からのしち年戦争でお金に 困ったイギリスは
アメリカの入植者たちに高い 税金 を支払わせます 入植者たちは猛反発 戦争の末アメリカ合衆国として イギリスからの独立を宣言し その後少しずつ西に領土を拡大 していくことに 活動範囲が広がるアメリカでは 遠距離でもすばやく連絡をとる 必要があり モールス信号で知られる サミュエル モールスなどは それまであった電信機を 独自の方法 で大幅に改良しました まだ文字しか送れませんがこの 通信の技術は計算機と同じくらい プログラミングと関わりが深い ものです 一方独立戦争に負けたイギリス はアフリカインドオーストラリア などを次々に植民地化しながら いわゆる大英帝国を築いていき ます 1837年 チャールズバベッジは 船の位置を計算する数表などのために 解析機関と呼ばれる機械を設計 しはじめました バベッジの弟子 エイダラブレース という女性は この機械についての書物をしるし その中で彼女は穴の空いたパンチ カードを使って この機械に計算させる方法を記
しており これが世界で最初のプログラム コードだと言われています このコードは実は師匠のバベッジ が書いたのではないかとも 言われてはいるものの エイダは 人類最初のプログラマー として 広く知られことになりました この時点ではまだプログラミング 言語はないですし 結局 解析機関は完成しなかった ので コンピュータもプログラミング言語 すらない状態で 最初のプログラマーが生まれた ことになります ちょうどその頃ついに西岸まで 併合しきったアメリカでは 一番端っこで なんと金鉱を発見 一攫千金を狙った人たちが次々 に移民として押し寄せ 乗ってきた船をそのまま乗り捨て てまで 金を掘りに行くという事態 になりました 西岸に到達しても 開拓者たちの 勢いが止まることはなく 次なる興味はすでに太平洋そして その先にある日本という島国でした 1853年突如現れた4隻の黒い船 ペリー来航 です ペリーは次の来航で日本に電信 機を伝え
電信柱などをはじめとしてのちの 日本の通信網の足がかりができました こうして およそ260年続いた江戸時代 は ついに終わりを迎えることに ヨーロッパの植民地支配がすぐ そこまで 迫っていることに 間一髪で気づいた 日本は このあと急いで富国強兵 を進めます それからほんの数年後 文字を送る電信に対して今度は 声をそのまま送る電話が発明されました 発明者の一人として有名な グラハム ベル はさらなる研究のためボルタ 研究所を創立し その後ベル研究所と名前を変え ます また人口の増加に合わせて それ までの手動方式では国勢調査が 間に合わなくなったため c-t-rという会社が製造を請け負 う形で パンチカードシステムの 導入が進んでおり 同社はこの年ibmという名前に改名 されました コンピュータの体となるハードウェア と コンピュータの心になるソフトウェア の両方にわたって この2つの組織は大きな役割を果 たします
アメリカの首都はワシントンd.c. ですし古くからある企業はこの ように 東海岸付近にあることが多いですが 若い投資家たちは西海岸の方にも 集まってきており のちにシリコンバレーと呼ばれる 巨大it企業が密集した地域 まさにプログラミングの聖地 が こちらに生まれることは 人々はまだ 知りません 1914年 日本と同じく植民地政策に遅れて いたヨーロッパの国 ドイツを取り囲む形で最初の世界大戦 が勃発 敗戦国となったドイツにはナチス 党が生まれ その間に遅れを取り戻していた 日本と結びつき 今度は太平洋まで囲んで二度目の 世界大戦が起こってしまいます ニイタカヤマノボレ1208ひとまる ふたはち これは日本軍が使った暗号でアメリカの 真珠湾を12月8日に攻撃しろという 意味です ドイツが使ったエニグマ暗号は もっと複雑で もはや人間の頭で解くことできません そこでイギリスのアランチューリング は チューリングマシンと呼ばれる コンピュータの元になる機械を
活用し 不可能と思われていたエニグマ の解読に成功連合国はドイツを 破ります それを受けて今度はアメリカで 爆弾を飛ばすときの計算のため コンピュータを発明しようと試 みるものが現れます ジョンフォンノイマンです 彼は原子爆弾の開発計画に参加 しており 当初はドイツに落とすはずだった 原爆ですが ドイツがすでに降伏していたため 日本に落とされることになります 実際に落とされた原爆でもノイマン の計算が入っていました 日本が降伏し第二次世界大戦が 終わったすぐ次の年 ノイマンの発明は世界に発表されます プログラミング可能な世界最初の 汎用電子式コンピュータeniacです このときはまだ1つの部屋に収まらない ほどの大きさだったコンピュータ も ベル研究所のウィリアムショック レイらによるトランジスタの発明 によって 大幅な小型化に成功しやがてスマートフォン やスマートウォッチにまで至ります 戦争で余力を残したアメリカと ソ連が核兵器を作りあい 冷戦を始めたさなか
ヨーロッパにも 欧州原子核研究所 通称セルンが設立されます 戦火のほとぼりが冷めない中で 大プログラミング時代 が幕を開け ます 人々をプログラミング言語に駆 り立てたのは コンピュータと会話したい気持ち でした コンピュータが唯一理解できる 機械語に近い言葉を 低水準言語 人間が理解しやすい言葉を 高水準 言語 と言って区別しますが 当初は人間が直接 機械語を書く か 機械語のかたまりを英単語で表 した アセンブリ言語 しか選択肢 はありませんでした 実は10年前 第二次世界大戦の中で ドイツのコンラートツーゼは 最初の高水準プログラミング言語 プランカルキュールを発明して いましたが 戦時中の混乱や情報統制などにより 残念ながら普及はせずに そのまま 消えてしまいます 現在でも使われる有名な言語が 登場したのは 1954 年 アメリカ ibm社に勤める ジョン バッカスが開発した fortran です
このあとfortranは何度も改良され 名前表記を変えながら 主に科学や研究の分野で長く使 われていくことになります これを受けて今度はヨーロッパ に研究者たちが集まり algol58 が誕生します その後のal gol60では begen から end で囲まれたプログラム の塊を ifやforで繋いでいくという ような 現在につながる構造化プログラミング を導入します 同時期にはアメリカの数学者の 間で lisp が作られました 元々数学の記法として作られて いたため 誰でも書けるようにする 気なんてさらさら無い言語ですが 時代の流行に流されず理屈で進化 していくため長く使い続けられる こととなり 方言である なんとかlisp が非常 に多いことでも有名です アメリカの海軍准将じゅんしょう コンピュータおばあちゃんこと グレースホッパーは もっと自然な英語でプログラム を書けるようにと cobol を開発します これらは最初期のメンバーであり ながらもその後長く使われ続けた
言語として知られています またこの直後にibm が自社製品のための 開発した rpg では コードの書き方がグッと人間の言葉 に近づいたため 機械語を第1世代アセンブリ言語 を第2世代 と数えたときに この初期メンバーなどは第3世代 rpgは 初の第4世代 として分類される ことがあります 世代の考え方は技術よりの話になって しまうため ここからは もう少し 文化的な流れに従って紹介して いきます ちなみに言語の用途的に 実際に 広く普及したのは rpg ではなく fortran の方です 学者たちは近い将来 ロボットが 自分で考えて行動するようになる のではないか と考え 早くも 第一次人工知能 ブーム が起こります それから 5年間ほどで あっという 間にアメリカでは 科学技術計算にはfortran 科学の専門知識を持たない事務 作業にはcobolという2強の図式が でき上がります しかしfortranの方は学生にとって 少し難しすぎたため
アメリカのダートマス大学では 代わりに basic という言語が作られる ことに またfortranとcobolの役割を両方にな える言語が作れないかという発想 から pl/iが作られます 一方のヨーロッパでも動きがあり ノルウェーでは algol を元に simu la が開発 初めてオブジェクトという単語 に焦点を当てました イギリスでも algol を元にした cpl bcpl が登場し begin end ではなく 波括弧 で囲む というスタイルも発明されます 1969年冷戦のさなか ソ連と技術力を競ったアメリカ が アポロ11号による月面着陸に 成功します 宇宙船では信頼性や丈夫さを優先 し あえて性能が低いコンピュータ を搭載するため 月面着陸とプログラミング言語 は無関係とされがちです しかし地上ではibmの高性能マシン がそれらを支えており fortranやcobolといった言語も人類 の飛躍に貢献していたのです
スイスで algol を元に pascal が誕生 300 年前にパスカリーヌを作った 哲学者パスカルに由来するこの 言語は シンプルながらも万能で このあと 登場する c と人気を二分する存在 となり 後の言語たちに大きな影響を与 えます アメリカでは国内での軍事的連携 の必要性から 東西をつなぐネットワーク arpan et が展開され これがインターネットの始まり とされています ベル研究所ではイギリスの bcpl から発想を得た ケントンプソン が b言語を作り それをデニスリッチーがさらに 改良して ここに伝説の言語cが産声をあげます cの歴史は 同じくベル研究所で 開発されていたos unix と強く結び ついており osを作るのは非常に難しいため unix はほぼ唯一の存在で 多くの会社が unix に頼ったことが c の覇権にもつながります ただし c 自体はすぐには有名になり ませんでした
理由はいくつかありますが当時の キーボードは現在とは異なり 波括弧などの記号を入力するの が難しかったというのも面白い 理由の一つです c 以外の発明も 多くありました ゼロックス社が simula lisp の考え方 を取り入れて smalltalk を作成 ここではオブジェクト指向という 考えかたが誕生しました 詳しい話は省略しますが オブジェクト指向は 複雑な関係 を コードで再現するための画期 的なアイデアです ヨーロッパでは フランスの アランカルメラウアー が lispなどを参考にして prolog を開発 します 人工知能言語処理の分野で活躍 しました イギリスの ロビンミルナー は 数学の証明に役立つ ml を開発し やがてフランスで caml...camlキャ ムルが派生します アメリカ大陸西岸 ワシントン州 出身のビルゲイツは basic 言語の関連ソフトを開発して 利益を得ることに成功
親友のアレンと共に マイクロソフト 社 をたち上げます カリフォルニア州でシリア移民 の父親とスイスの母親の間に生まれた スティーブジョブズは 親友ウォズニアックらの力を借り て apple computer アップルコンピュータ を設立しました 彼は一般家庭に向けた パソコン の普及を目指しますが 需要があるのかどうかは まだ疑問 視されていました しばらくして ニューヨーク州 ibm の元に 西にある小さな会社が発売 した apple ii という パソコン が大ヒット しているとの情報が入ります すぐにibmもパソコンを作り始め ますが肝心のパソコン用osを作る 会社との金銭交渉がうまくいかず 仕方なく 若いソフトウェア企業 マイクロソフトにosの開発を依頼 マイクロソフトは見事に独自の osを作りあげ 以後 osの販売会社として知られる ことになりました 一般人の間では発売されたパソコン によく付属していた basic言語 が
人気になり 研究者技術者の間ではpascalが流行 コードを書くことが好きなプログラマー たちはlispを好む傾向も生まれました アメリカの国防総省は 信頼性が 高く 国として使える言語を求めて 国際競争入札を実施しました 赤青黄緑で色分けされた4チーム のうち 緑色のフランス人チームが優勝 し 完成した言語には 最初のプログラマー ada の名前が付けられ 今でも飛行機の制御システムなど で使われる ada言語が誕生しました 軍のネットワークは一般人が使えない ためアメリカの大学たちはcsnet やbitnet へ参加していきます ヨーロッパの大学の間には eunet が形成されます 次第にオブジェクト指向の便利 さが認められてきたので ベル研究所の ビャーネストロヴ ストルップ が
c言語にオブジェクト指向のための 機能を追加して のちに c++ と名づけられる言語 が誕生します コネチカット州の ブラッドコックス も似たようなアイデアを思いつ いていたようです 彼はc言語に手を加えるのではな く 元々オブジェクト指向を持っている smalltalk言語 の中にcを丸々合体 させてしまうという斬新なアイデア から objective-c を作りました c++とobjective-cはどちらもcを含み ますが 偶然にもお互いに邪魔しない形 で拡張したため そのまま組み合わせて objective- c++ として動かすこともできます 仕組みどころか名前まで共存でき ているところが面白いですね 1984年スタンフォード大学で研究 をしていた クリーブモラー は 学生のために作っていた言語 matlab を 商用化 データグラフの生成にも優れて おり教育現場に広がりました 日本の大学間にも junet が作られ ます 初めて身近でコンピュータに触 れた人たちも増えてきて
今度は世界規模での 第二次人工知能 ブーム が到来します 南アフリカでは冷戦の影響で アパルトヘイト 体制が黙認され 黒人やアジア人 への差別が横行していました プレトリアに生まれ 黒人を庇う 発言をして学校で激しいいじめ にあったイーロンマスクは 社会的な抑圧や統制への嫌悪感 を覚え やがて自由を掲げて アメリカ移住 を目指すようになります フランスの ベルトランメイヤー は eiffel 言語と同時に オブジェクト指向を詳しく説明 した本を発表 eiffelは smalltalk と並んでオブジェクト指向 の教科書的な存在となります パソコンの普及に合わせて それ まで当たり前であった文字の入力 だけで操作するcuiではなく 画面にアイコンを表示してそれを クリックしたらアプリが動き出す という gui を取り入れる動きが 拡大します apple は macintosh ..
のちの mac を マイクロソフトは windows という osを発売しました appleが パソコン本体とos をセット で売るのに対して microsoftは osだけを単品で提供します しかし当初はそれぞれ別の理由 で いまいち伸びず特にappleの方 は ジョブズが会社を抜けることに もつながってしまいました cより先に広まっていた pascal が 全盛期を迎えており appleはプロジェクトごとに lisa pascal clascal というふうに改造を加えて いき 結局こちらでも オブジェクト指向 の影響を受けて object pascal に行き 着きます pascal の開発環境 turbo pascal を作って 有名になった ボーランドという会社がありました 同社の技術エース アンダースヘルス バーグ は このあと数年後に この apple の object pascal を参考にして 新たな object pascal を作ります なおappleの object pascal は開発環境 の名前で 新しく作った方の object pascal が プログラミング言語の名前なので 非常にややこしいです
アメリカのcsnetと 日本の junet が 接続し いよいよ国を超えた ネットワーク が出来始めます 80年代も後半になるとパソコンの 性能が良くなって c言語の関連機器が安くなったことも あわせて ようやく cやc++ が覇権を握りました すると c の進化バージョンを作る のではなくcを利用して別の言語 を作る という動きが活発になります ラリーウォール アメリカ ワシントン 州 が作った perl は あらかじめ難しい処理をc言語で 作って用意してあるので perl は書いてから動かすまでが 驚くほど簡単でした 当然その分だけ 無駄な部分も増 えて 動きが遅かったりしました が 開発スピードの競争が激しくなる につれて とにかく誰よりも先にコードを 完成させて失敗したらまた書き 直せばいいという このperlのようなスクリプト言語 ...厳密に言えばインタープリタ 言語が台頭し始めます 東西ドイツを分断するベルリンの壁 は崩壊し 1991年ソ連の消滅によって米ソの 冷戦が終結しました
特にヨーロッパではそれまで関わり を持てなかった人々の間で 技術的な交流が盛んになります オランダのグイドヴァンロッサム が開発した python は スクリプト言語でありながらも perl とは対照的に 書く人によってコードがばらつく ことを許さないシンプルいずベスト に重点を置いています 一方でコードをシンプルに保ち たのであれば 役割を特化させれば良い という 考え方もあります microsoft は windowsアプリケーション 向けに visual basic 通称 vb を発表 し その後さらに用途を絞った vba へ つながります フィンランドの学生 リーナストー バルズは unixと同じように動くos linuxを なんと 独自の作り方で完成させました 先に成功していた unix windows は 基本有償であるため リーナスがこれを 無償で利用できる オープンソース として配布した ことは it界全体に大きな影響を与えました
スイス 欧州原子核研究機構 cern の ティム バーナーズリー は インターネット上で繋がっている ページを公開し world wide web と名づけました この中に使われている html言語 という技術も彼のアイデアによる もので 彼は 誰もが自由に webを使える ようにするため 特許を取得しませんでした 今度は遠く海を超えた ニュージーランド の大学で s言語 を真似た r言語 が作られ オープンソース化された結果 その後 研究分野 で広く活用される ようになります ブラジルの リオデジャネイロ大学 では perlやpython の仲間であるスクリプト言語 の lua が開発され ゲームエンジンとの連携で活躍 しました インターネットの商用利用が国 に認められ 日本でも webサービス が急増します アメリカでは yahoo amazon が登場 小さな何とかネットという単位 は もはや消滅していました
一般ユーザーが インターネット に繋ぐ窓はブラウザ といって この窓を支配することは インターネット そのものを支配するにも等しい ため ブラウザ開発の競争が起こりました netscape communications から netscape navigator というブラウザが公開されます 日本での愛称は ネスケ 他社よりも早く 市場に出せたこと から リードを取ることができました しかし翌年95年 microsoftは 新しい os windows95 と同じタイミングで internet exproler 通称ie を発売 windows95 の大ヒットとともに ieは 瞬く間に ネスケの ライバル となります この2社による し烈なシェア争い は 第一次ブラウザ戦争 と称され どちらに合わせれば良いのかわ からず混乱した 当時のweb開発者たち もこれに巻き込まれます ちょうどこの頃 sun microsystems の ジェームズゴスリン は 新しい言語 java と それをコンピュータのメーカー
や機種に合わせて 毎回違ったコード を書かなくても済むようにする jvm を発表しました jvmの試みは大成功し javaは一躍トップ言語へと躍り出 ます 当然webブラウザでも java を動かし たいため sunはnetscapeと業務提携を結び さ っそくブラウザで javaアプレット という小さなアプリを動かせる ようにしました ただnetscape側は この java とは別に ブラウザ専用のスクリプト言語 livescript を開発中で java人気にあやかって javascript と 名づけ直すことにしました これに対して microsoft ではieで動く jscript という言語を開発 このあと非常に ややこしい関係 を辿っていきます ややこしいと言えば object pascal です この年 turbo pascal の後継である delphi が発売され 数年後 object pascal は delphi専用の 言語ということで delphi言語 と 改名されます つまり delphi と delphi言語 は別の
ものを指すということです さらにその数年後 諸事情により delphi言語は delphi専用の言語ではな くなってしまったため 再度 object pascal という名前に戻り ました その時の名残で object pascal じゃなくて delphi だよ と注意されることや delphi じゃなくて正しくは delphi 言語 だよと言われることがあります が 現在は object pascal です webブラウザとインターネットを 介して繋がっている大きな機械 本体のことをサーバーと言います が サーバー側で動かすプログラミング言語 も必要です 当初はperlがよく使われていました が カナダオンタリオ州のラスマス ラードフは もっとwebに特化した 言語を作ろうと考え php/fi のちの php を開発しました サーバーはさらにいくつかの役割 に分けて作られます この年に次々と登場した apache http server や
データベース管理システムの mysql までもが 全てオープンソース として発表 され ライセンス料を支払わずにwebサービス を構築できる linux apache mysql php ...の組み合わせ 通称lamp環境 が完成しました lampのpは俗にp言語と呼ばれphp以外 にもpythonやperlが当てはまります 日本からも有名な言語が誕生します 約2年間の開発期間を経て発表された まつもとゆきひろ の スクリプト言語 ruby は 先に生まれたperlやpythonと同じグループ に分類されますが とにかく楽しくコードをかける ようにという設計思想と 徹底的なオブジェクト指向が特徴 的です lamp環境で使う p言語に rubyが仲間 入りしたため rubyのrは 尻尾が生えた p という 設定になっています 同じく日本 江戸時代に生まれた 花札からそれを作って販売していた 任天堂という会社は ゲームコンピュータの会社へと
受け継がれており この年に ポケットモンスター を 発売します ゲームとしてもそうですがプログラミング の観点で見てもその後多くの教材 的価値を生み出しました ちなみにポケモン自体の開発には このときはまだ 機械語に近いアセンブリ言語 を使っており 一般人でも手が届く安いゲーム機 に できる限り無駄なくデータを 詰め込もうといった企業努力が 感じられます アメリカでは オーディオ機器や コンピュータ音楽に特化した 言語 も生まれていました appleにはジョブズが復帰しジョブズ が設立していた next computer の影響 によって objective-c が apple の主力言語になります 一方 ブラウザを巡った争いでは netscapeが 会社ごとにバラバラの 言語を使っていては 今後問題があるとして ヨーロッパ の ecmaインターナショナル に仲裁 を依頼し その結果 ブラウザで使う言語のルール として ecmascript が定められました
共通ルールさえ守れば名前はなんでも 良いとは言いつつ microsoft も 自社用のjavascript を作る 状況に落ち着きました しかし 翌98年 microsoft が windows98 に 最初から ie をセットで搭載して販売したこと で ブラウザのシェアは ieの優勢が 決定的となり このまま 第一次ブラウザ戦争の 勝者は ie ということに 結局残された javascript はあまり 評判がよく無いままで 代わりにmacromedia社 が提供していた flash という技術が流行し ブラウザで動くサイトを作りたい ならflashで十分ではないかという 意見が主流になっています flashはこのあと adobe という会社 に adobe flash として 買収されました 各地で 1000年に一度の瞬間を祝 おうと ミレニアムカウントダウン がはじまります このとき技術者たちの間では 2000年
問題 を巡って騒動が勃発 cobol fortran を使った古いシステム では 処理の節約のため 1954年 なら 54 と言うように 1900 を省略した 下2桁で西暦を表す 手法が盛んに使われていて 2000年になった瞬間に コンピュータ が1900年だと勘違いして 誤作動や急停止が起こる危険が 指摘されました さらに西暦2000年は閏うるう年の中 でもかなりのレアケースだった ため 時間の処理がめちゃくちゃになる のではないかとニュースにもなりました が いざ年が明けてみれば 心配のしすぎ技術者の努力のおかげ と多くの意見が寄せられながら も 人名に関わるような重大事故は 特にありませんでした 2000 年代に入ると ディスプレイ の画質が高くなり コンピュータの基本部品の一つ として gpu が普及 その上で動作する グラフィック 専用の言語が 多くのメーカーによって 作られました 登場から30年経ったc をそろそろ 置き換えようと d言語 アメリカ が登場 ちなみに c の前は b で その前は
bcpl だったため 次は p がくるのかそれともアルファベット 順に進んで d なのか などと言われていましたが この時点で両方とも出尽くした ことになります なお一般的に cの進化系統は 普及 度の観点から見て c++ java とされています windowsでosを牛耳りieでブラウザ 戦争も制したソフトウェア界の王者 マイクロソフトは c++やjavaのように優秀なプログラミング言語 を 自分たちのものにしたいと考えて いました そこで delphiの作者 アンダース ヘルスバーグ を雇い入れ 新しい言語 c# を作成 名前の由来は c c++ の流れに合わせて c++++ をまとめて c# としたそうです この頃の流行は すべての技術のベースになっている c/c++ はもちろんのこと 使える場面では 圧倒的に javaが 人気で windowsアプリではマイクロソフト 製のvbや でてきたばかりのc# ブラウザで見るwebアプリやサイト
ならperl php 科学や研究では対象の分野に合わせて matlab, r のような棲み分けとなりました よの中には既にjavaを動かすための jvmがあちらこちらに行き渡った ことから 今度はそのjvmを利用して動く言語 たちが登場 イギリス生まれの groovyや スイス の scala はその代表で 10年間ほど 流行しますjava8まで デンマーク の デイヴィッドハンソン は 日本生まれの言語rubyを好ん で使っており 自分が作っていたwebアプリを整理 しなおすことによって ruby on rails が誕生しました 最初からアプリの全体像が完成 しているため 特にスタートアップ 企業に好まれ ruby が世界に知れ渡るきっかけ にもなります それを追う形で オランダの エイドリアン ホロヴァティ らによって python を使った フレームワーク django も作られました web開発は 選択肢も増え充実して きた一方
一般企業にはまだハードルが高い 分野が ゲーム開発です デンマークの over the edge entertainment 社は ゲームエンジン unity を公開 します プログラミング言語は当初1つには 定まっておらず c# unityscriptjavascript boopythonを改造 と呼ばれる言語から好きなもの を選択できるシステムでしたが 9年後には c# だけが残りました 急増したwebサイトの中から情報 を検索できるエンジンが必要となり 先に有名だった yahoo に対して 高品質な検索エンジンを持った google という会社が後から追いつ いてきました google maps が開発者たちを驚かせ たのは ajaxという javascript を巧みに活用 した技術力の高さで これは javascript が再評価される きっかけとなり googleが サーバーサイドでよく使って いた python の人気も高まります
一方で microsoftのieは シェアを取り すぎたためウイルスの標的にも されやすく 新しい機能の開発も遅れがちで 人気にかげりが見え始めました この隙を見て 再び他社のブラウザ 開発は活発化し すぐに第二次ブラウザ 戦争が勃発します ネスケは既にオープンソース化 されており mozilla のfirefoxとして 新しい名前 で再挑戦 appleは safari を抱えて参戦 opera は 実は ieたちとほぼ同期で 長年このチャンスを伺っていました きたる ecmascript バージョン 4 の 制定にあたって 新しい機能を多数追加して 革命 を起こしたい adobe mozilla opera google と いきなり大きな変更を加えるのは 良くないとして 反対した microsoft yahoo との間で 対立構造 が浮き彫りとなります そんな中 apple から突如 発表された のが 初代iphone です
このあとスマホが 人々の生活を 変えたことは 言うまでもありません 初代iphoneのosは unixをベースにした nextstepをベースにした os x で 翌年にiphone os 3年後にはiosと改名 されました 開発言語は引き続き objective-c が 採用されています google からは android がリリースされました appleがスマホ本体とosをセットで 販売するのに対して googleはosのみを単品で提供 android os は linux をベースに作られて おり 開発言語は java が採用されています facebookやtwitterは元々 ブラウザが 必要なwebアプリでしたが ブラウザが要らないネイティブ アプリ版ができたことで人気になり 同じように objective-c や java を扱う プログラマーが増えました 世の中がスマホに熱狂している 中 正体不明の人物 サトシナカモト によって ブロックチェーンという
技術が 考案され c++で書かれた暗号通貨ビットコイン の開発が進んでいました さて ecmascript の論争では microsoftやyahoo 側の主張が勝ち バージョン 4 は放棄されることに よってjavascriptの進化は 一旦止まって しまいましたが ブラウザ戦争自 体 は止まらず まずはiphoneに搭載されていた safari が順調に勢力を伸ばしていきます googleは新しいブラウザ chrome を 作り始め ブラウザ戦争 最後の 参戦者が遅れて登場 さらに chromeの中で javascriptを動かす ための v8エンジン を切り出して 誰でも使えるようオープンソース としてタダでばら撒きながら 影響 力を強めていきました v8エンジンに携わっていた ロバート グリースマ は ベル研究所出身で 有名なエンジニア の ロブパイク ケントンプソン らと一緒に 今の c++ があまり好きではない
という 価値観を共有した上で 新言語 go を作り始めます カナダバンクーバーのライアンダー ル は googleが公開した v8エンジン を ブラウザの中ではなく そのまま裸で動かすことに成功 し node.js を発表 これのおかげで ブラウザでない ところでもjavascriptを動かせるように なりました javascriptの影響力が高まったと同時に それと相性の良い mongodb などのデータベースが登場 します さらに次の年にはサーバー側で 使うexpressウクライナ ブラウザ側で使うjqueryマサチューセッツ 州 ジョンレシグなどの技術が登場 し javascriptに足りない機能がどんどん 補われていきます しかし一方で肝心の javascript本体 の書き心地は未だ改善されていない ままです サンフランシスコの ジェレミー アシュケナス は ruby のようなコードを書いたあと それを javascript に自動変換できる
言語 coffeescriptを google はいっそのこと javascriptを 引退へ追い込んで 新しい言語を 作り直そうと 強引なアプローチで dart言語 を 発表 このように できる限り javascript を書かなくて良いようにする 言語 たちのことを altjs と言います javascript の由来にもなった人気の java にも 若干の不便さが目立ち 始めており チェコの jetbrains は 新しいjava として kotlin を発表 ほぼ同じ目的で ceylonノースカロライナ 州 レッドハット社 も登場します 同世代の php もかつての勢いを 落としつつありましたが 専用のフレームワーク laravelアー カンソー州 テイラーオトウェル が rails や django より数年遅れて登場 したことで 逆に 新しい考え方を多く取り入れる ことができ php が時代の波に乗り 直します
この年日本は太平洋沖の地震により 東日本大震災に襲われました 地震発生からわずか4時間弱で公開 された震災インフォはボランティア の制作で このサイトを構成している ushah idi の技術基盤はphpで支えられて おり 実際の運用には 日本にいた ruby 言語の関係者たちが 協力し 迅速に情報を届けました 4年間の開発ののち googleがついにchromeの android版 ios 版 の両方を完成 先にパソコン版もリリースしていた ため これでスマホを含めたほぼ全ての 環境で chrome が使えるようになり シェアの拡大を加速させます さらに最新版のandroid4.4 に 最初から セットでchromeを搭載したことで これがトドメの一撃となり ここから2年間ほどで あっとい うまに chrome の1強体制が確実な ものとなって 第二次ブラウザ戦争の 勝者 が 決まりました microsoftはスマホ事業に失敗しブラウザ のシェアも奪われたことで方針 転換を余儀なくされました 他社向けのオープンな技術にも
力を入れるようになり 過去に delphi c# などを作った アンダー スヘルスバーグ を中心に javascript をほぼそのまま活かした 控えめなaltjsである typescript を 発表 facebookからも altjs とまではいき ませんが jsx という javascriptの拡張形式が生まれ 画面の見た目を作るための react に採用されました typescript と jsx は どちらもjavascript の拡張ですが c++ と objective-c の関係のように 共存可能であったため tsx という 形式も登場します reactの登場によって mongodb express react node.jsという 通称 mern スタック が完成し いよいよ javascriptだけで webアプリ を作れる環境が整いました 先に出てきた lamp と比較すると 足りない要素が目立ちますが これを補ってくれたのが クラウドコンピューティング です
amazon microsoft google などは世界中に 持っているサーバーを 有料サービスとして貸し出したため 一般開発者たち はわざわざ自分で サーバー を用意しなくても良く なりました docker という新技術の登場はそれを さらに簡易化し アプリの機能をクラウド上に分散 させて作るマイクロサービスが 流行 大きなwebサービスを柔軟に作り たければ マイクロサービス 小さなwebサービスを1箇所にまとめて 作りたければ モノリシック といった使い分けが可能になります マイクロサービスの波にうまく 乗れたのが go言語 や java のフレームワーク spring boot でした 特に かつての勢いを落としていた java でしたが 大きな新機能を追加 するなどして 大企業を中心に java や go言語 の 採用が増えていきます アプリのヒットで事業を拡大した facebookは 得意分野をさらに伸ばす
ために phpベースの新言語 hack を作成 appleも古くなってきた objective-c に変わる swift を発表し ios 開発者にとって より使い心地 の良い プログラミング環境 を 用意しなおしました 設計者はクリスラトナーで 多く の言語を支える llvm を発明する など プログラミング言語を作るエキスパート として知られています mozilla は rust言語 1.0 をリリース し c/c++のリニューアルに挑戦します cはもう古い と言われ続けながら も あらゆる技術の基礎に定着しき っているため 代わりの言語を作る 試みは何度も失敗してきた過去 があり ネスケ時代を含めれば2度のブラウザ 戦争に関わったfirefox の開発者たち が そのノウハウを活かせるかどう かに期待がかかっています rustに対抗する形で zig 言語の開発 もスタートしました javascriptに 大きな展開 がありました いつまでも お互い文句を言って いても 先に進まないということ でついに各社の意見がまとまり
ecmascript harmony と呼ばれていた 新しい バージョンは 西暦をつけた ecmascript 2015 が正式 名になりました このルール変更によって 各社が 作る javascript は大幅に進化 逆に altjsたちの中でも 最も人気 だった coffeescript は採用が減り また dart に至っては codemntor社の 調査で 学ぶ価値がない言語 第1 位を 見事に獲得 唯一 javascriptを活かす形であった typescript だけがこの後も人気を 伸ばし続けました 再挑戦といえばこの頃は第三次 人工知能ブームの真っ最中で チェスやオセロでaiが人間に勝つ という衝撃から始まり 次に画像認識によって aiが物体 を判別できるようになって それを小さいスマホに搭載できる 段階まで来ていました aiの開発言語としては pythonがす っかり定着し 今まではr言語などを使っていた 他の研究分野へも浸透
web業界では pythonで作られたdjango フレームワークの人気にも繋がり ます googleではそのようなai技術を利用 したスマホアプリを作るプロジェクト が発足し プロジェクトはやがて ナイアンティック 社として独立することに. 社名は はるか昔 ゴールドラッシュ の際に 一攫千金を夢見た人々を 乗せて このカリフォルニアの地にやってきた 船 ナイアンティック号 に由来 します 同じ頃 イーロンマスクは 彼を 尊敬する 若く優秀な起業家 サムアルトマン らとともに open ai を設立 汎用的な人工知能の開発を目指 しました 2016年 ナイアンティックは 日本の 任天堂および株式会社ポケモン 協力のもと スマホゲーム ポケモンgo をリリース カメラやgps googlemap時代に培った 地図データの取り扱い方や aiによる物体の判別 3dキャラクター の操作など あらゆる技術の結晶とも言える この作品は 世界中で大流行し
その後日本からの playstation vr 発売 も相まって 世間では ar/vr への注目度が一気に 高まります 同時に開発者の間で話題になった のが unity ポケモンgoを支えていたunityに思 わぬ形で注目が集まりました また unityにおける3dゲーム以外 の特徴は クロスプラットフォーム といって android でも ios でも同じように動 かせることです 先に流行していた react native 等 とは異なって unityは独自の表示システムレンダリング エンジンを持っているため表示 が安定していました googleからも 独自の表示システム を持った 一般アプリ向けのクロスプラットフォーム flutter が発表されます 採用された言語は なんとあの 学ぶ 価値がないでお馴染み dart でした が 他で使われていない分 flutterのため だけに進化していくことができた ため 結果としてflutterは成功しdart言語 の価値も復活します
一方でこのようなクロスプラットフォーム が成り立つということは 各社のスマホに変更が少なくなって 悪く言えば進化が止まり よく言えば 安定したためとも言えます アプリ開発がパターン化してくる と その作業は難易度が下がった ため ノーコード/ローコードと呼ばれる プログラミングせずにアプリを作る 道具も同時に注目を浴びはじめました appleと同様に googleも 古くなってきたjavaに変わる言語 としてkotlinを採用 当初は ios の swift を android でも 採用しようという 統一論も有力だったようですが javaの開発者たちを置き去りにしない ことが何よりも優先され 純粋な進化系統の中から kotlin が 選ばれました また javaの産みの親であるsun を 買収したoracleという会社が 自社製品を有償化したことがき っかけでjavaが有償化するという 噂が拡散 この件については色々と誤解が 多く結論としては引き続き無料 でも使えるのですが
諸々の流れから 一部の層のjava 離れが起こってしまいます javaを追い越す勢いで人気になった python に対しても new python を歌い 2012年から6年間 もテストされてきた julia 1.0 が ようやくリリースされました aiブームによってr言語からpython への移行が見られたように juliaがpythonから席を奪うには何か 大きな技術的革命が必要かもし れません その革命の候補の1つとして見えて きたのが 量子コンピュータ 研究の一歩先をいく ibm は量子コンピュータ フレームワークqiskitキスキット を前の年に発表しており googleもそれを追う形で cirqシルク を発表 両者とも python ベースですが 今後別のフレームワークが有名 になれば 言語のシェアも大きく変わる可能性があります 様々な分野で力を増す google に ai開発でも負けてしまうと 焦った
イーロンマスクは 社内での確執を産んでしまい open ai を見捨てるような形で辞任しました 2019年 新型コロナウイルスが蔓延 しリモートワークが普及 副業との相性の良さからプログラミング を始める人が急増します itで世界に遅れをとった日本政府 はプログラミングを義務教育化 スクラッチをはじめとしたビジュアル プログラミングを中心に学び 実用的な言語の中ではpythonが選 ばれる傾向があるようです 任天堂から ナビつき つくってわかる はじめて ゲームプログラミング が発売 技術としてしか見られてこなかった プログラミングという行為が 1つの遊び文化として商用的に利用 されたことが印象的です チャットボット chatgpt の性能が 飛躍的に向上し 長文の要約を素早く行うなど 部分 的には実用的なレベルに達しました
イーロンの読みは外れ openai は google をこの分野で 一気に抜き 去る展開に 翌年にはさらに性能が上がり 元々 文章能力が高い chatgpt はプログラミング言語 との相性がよいため コードを代わりに書かせる使い方 が話題になりました それでもまだ 人類がプログラミング言語 を捨てる時代は遠く appleでswiftを作った クリスラトナー は ai開発のために 新しい言語 mojo を作りました 第三次人工知能ブームは もはや ai開発戦争 とも言えるフェーズ に突入しています 10年後の我々は この年代をなんと よんでいるのでしょうか cやjava pythonに続くような 大きい プログラミング言語は まだ出てくるのでしょうか 言語は目的のための道具に過ぎ ませんが 道具の歴史を知ることは 真の目的 を我々に与えてくれます あなたが好きな言語の歴史を もう一度 振り返ってみてください