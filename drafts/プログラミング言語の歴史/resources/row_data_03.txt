
プログラミングの歴史と未来【日本一講師の本気授業】
https://www.youtube.com/watch?v=rGLLHny7Mzo

(00:00) この計算機上で最初のプログラムが動作しました この仕組みがフレームワークにつながっていきます いま、プログラミングを学んでいる人たちも、 その知識やスキルは必ず未来につながります はい、こんにちは 今回のテーマはプログラミングの歴史と未来です プログラムというのは何かをする手順をまとめたものですね よく運動会の競技を順番にまとめたもの これをプログラムと呼んだりもしますが、これと一緒です そして、機械に対してこの順番で こういう仕事をしてくださいというふうに指示をすることを プログラミングといいます さっそくウォーミングアップとしてひとつクイズを出しますね この3人の中で、世界初の コンピュータープログラマーといわれる人がいます さて、それは誰でしょう 正解はこのあと、本編で解説していきます じゃあ早速、世界最古のプログラミングは どんなものだったのかを見ていきましょう これにはいくつかの説があって、 記録に残ってる最古のプログラミングはこちらです これはエジプトアレクサンドリアのヘロンによるものです
(01:06) 紀元10年から70年頃の話ですね ヘロンは蒸気の力を使った仕掛けを作るのが得意で、 これは水蒸気の力で神殿の扉を自動で開け閉めする仕掛けです これとは別に人形に滑車と紐をつないで 紐を引っ張ると人形の動きを操れる仕組みもありました これは紐のつなぎ方を変えることで、 人形の動きを変えられたということで、 これがプログラミングにまつわる最初の記録だといわれています でも、世界最古のプログラミングというと、 こちらが挙げられることも多いですね これはジャカード織機という機械で、 1801年に発明された プログラム可能な布を織る機械です このときの時代背景として 1700年代の後半からイギリスで始まった産業革命の流れの中で 織物工業の技術がたくさん出てきました この機械を発明したのは、 ジョゼフマリージャカールというフランスの発明家です 彼は裕福な家庭に生まれたんですが、 10歳のときにお母さんを亡くし、 お父さんも20歳のときに亡くしています
(02:04) そのとき、9人兄弟の中で生き残っていたのは、 ジャカールと5歳上のお姉ちゃんだけでした なので、ジャカールがお父さんの仕事を 継ぐわけになるんですけど、それが機織りだったんですね ここまでたくさんの苦労もあったと思うんですが、 6年後、ジャカールは 結婚します 中流家庭の女性で財産もあった女性なんですが、 この後、 ジャカールは機織りの事業に失敗して多額の借金を抱えたり 訴えられることになります 親の遺産と妻の財産をすべて手放して 全財産を失っちゃうわけなんですが、 そんなとき、妻との間に息子さんが誕生します それもきっと覚悟を決めるきっかけになったのかもしれません その翌年からジャカールは発明作業を開始して、 それで生まれたのがさっきのジャカード織機です プログラミングに使われたのがこのようなパンチカードで、 これは厚手の紙に穴をあけて、 そこに糸を通すか通さないかという指示を機織り機に伝えました このパンチカードが この後のプログラミングに大きな影響を与えていきます 機織りの作業でも、 それまで布のデザインを全部手作業で行っていたので、時間もかかるし間違いやすかった
(03:07) それがこのパンチカードでプログラミングできるということで、 作業がものすごく効率化したんですね ただ、実はこの機械の発明当初、他の機織り職人から 自分たちの仕事がなくなっちゃうと反対を受けて 機械が壊されたりもしました でも、あのナポレオンがこの織機を見学する機会があって、 これは素晴らしいということで特許を与えられたんですね これをきっかけにジャカード織機は国中に広まって ロイヤリティーで生活できるようになったと言われています というわけで、プログラミングの最初のきっかけはこちら 1801年のジャカード織機です 産業革命でいろんな技術が発明される中で、 世界で初めて機械式の計算機が発明されます 発明したのは、 イギリスのチャールズバベッジで 彼は小学生時代から何人も家庭教師をつけられて 熱心な教育を受けて育ちました 後に数学者になるんですが、 彼が 計算機を思いついたのは20歳ぐらいのときですね その頃、イギリス政府の主導で何人かの数学者が 対数や三角関数の値を計算して表を作っていました
(04:08) そんななかバベッジは 部屋にあった間違いだらけの表を眺めながら、 これは機械に計算させた方が いいんじゃないかって考えたわけですね そうやってできたのが階差機関です この階差機関は残念ながら、当時は未完成で終わっちゃいました この階差機関は、 対数や三角関数を求めるのに特化した計算機だったんですが、 もっと汎用的な計算もできるんじゃないかということで 思いついたのが解析機関です この解析機関の動力源は蒸気機関で、 最初にパンチカードを使って計算のプログラムを組んで、 それを機械に入れると実行できるというものでした この機械の中では、歯車の位置やその回転の角度などで 情報を表現していました もし完成していたら、長さ30メートル幅10メートルということで、 今の電車1.5両分の大きさだったみたいですね で、もし完成していたらって言ったんですけど、 実はこれも製作が途中で頓挫しちゃいました というのも、バベッジは気難しいところがあったみたいで、 機械を作る職人と揉めちゃうことが多かったみたいなんですね
(05:12) このような機械は全部手作りで作る必要があったので、 精度にうるさくなっちゃうのは 仕方がない部分もあったのかなと思います そんなこともあって、政府からの出資も止まってしまう それで未完成のまま終わっちゃいました こうなるとこのバベッジのアイデアも 埋もれてしまいかねない状態だったんですけど、 彼の功績が残ったのは この人の存在が大きかったと言われています イギリスの数学者エイダラブレスです 彼女は、バベッジのアイデアや解析機関の可能性を 完全に理解していた数少ない人物の一人だと言われています 彼女が解析機関についてまとめた本の中で、 数学上重要なベルヌーイ数というものを求める 計算のプログラムコードを載せたんですね で、これが世界初のコンピュータープログラムだと言われています はい、というわけで、世界初のコンピューター プログラマーと言われているのはこのエイダラブレスでした バベッジとエイダラブレスは共同研究を進めるんですけど、 後になって その研究の中で設計された解析機関
(06:08) さらに階差機関も正しく動く設計だったということが判明しています なので、バベッジは コンピューターの父と呼ばれたりもしていますね 続いて、時代は新しいフェーズに入っていきます コンピューターの発展の歴史はざっくり言うと、まず ハードウェアが進歩して ソフトウェアが追いかけていくという流れがあります つまり、まずはモノや機械が発明されて、 それを利用するためのプログラムが開発されていくイメージですね というわけで、1800年代から1900年中盤にかけては ハードウェアの部分が大きく進歩しました 最初のきっかけは真空管の発明です これは中身が真空になっていて、 2つの電極に電圧をかけて片方の電極を高温にすると、 電流が1方向に流れるというものですね この発明がきっかけで、それまでは蒸気で動いていた機械装置が 電子回路に変わっていきます さらに、1940年代に入ると、また別のある理由で いろんな国が競うようにしてコンピューターを開発していきます
(07:07) この理由は何だか分かりますか？ 例えば、1941年にドイツで開発されたのが Zuse Z3 という計算機です この計算機は、飛行機の翼の振動を解析するのに使われていました この頃、イギリスでは Colossus が開発されました Colossus はドイツが第2次世界大戦中に使っていた 暗号通信を解読するために使われていたものです そして、アメリカでも1937年から42年にかけて、 アタナソフとベリーによって アタナソフANDベリーコンピューターが開発されました これは頭文字をとって、ABCマシン とも呼ばれたりします この後に開発されたのがENIACです ENIACはアメリカ陸軍で弾道の計算をするために設計されたものですね というわけで、第2次世界大戦をきっかけに、 いろんな国でコンピューターが開発されていきました そして、一般的には このENIACが世界初のコンピューターだと言われることが多いです というのも、Zuse Z3 は1943年、 ベルリンへの空襲で破壊されてしまって
(08:14) Colossus は 暗号という秘密情報を扱っていたこともあって、 1970年代まで存在が隠されていたんですね ABCマシンは開発者がアメリカ海軍の研究開発に呼ばれて 機械が放置状態になっちゃって周りに知られることがありませんでした このENIACは1946年に報道されたことが きっかけで一般に知られるようになったというわけです ただ、専門家には このどれもコンピューターというには十分じゃないと言う人が多いです このあたりの計算機は、ある程度プログラミングができたりとか、 電子的に計算できている部分もあって、 かなり現在のコンピューターに近いものなんですけど、 条件分岐の構造がなかったり とか、暗号の解読のように機能が専門的だったりもしたんですね さらに、今のコンピューターと大きく違うのが プログラムを内蔵できるほどのメモリが搭載できなかったという点です つまり、この頃の計算機はパンチカードのように穴が開いた テープでプログラムを読み込んだり、 配線を変えることでプログラミングをしたりしてたんですね
(09:14) それに対して、世界初のプログラム内蔵式コンピューターが Manchester Small-Scale Experimental Machine、SSEMと呼ばれたり、 または The Baby あるいは Manchester Baby という愛称で呼ばれることも多いです 世界初のコンピューターは、 この Manchester Baby だと言う専門家もいますね 1948年、 この計算機上で最初のプログラムが動作しました そのとき、3つのプログラムを動かしたと言われているんですが、 その一つが2の18乗、262144 の最大の約数を求めるというものでした 求め方としては 2の18乗-1から小さくなる方向に 1つずつ約数かどうかを調べていくという時間のかかるプログラムです ちなみに割り算は割る数を繰り返し引き算することで実装していました 正しい答えの131072、これを求めるまでには52分かかったそうです その間、350万回の命令を実行したということで、 1秒あたり約1100回の命令を実行していたというわけですね
(10:20) じゃあプログラムの起源を知るために、 この Manchester Babyでどんなふうにプログラムを実行していたのか、 もう少し踏み込んでみていきましょう こちらが Manchester Baby のイメージ図です この計算機ではウィリアムス管というものを使っていました ウィリアムス管というのは、ちょっと昔のブラウン管のテレビみたいに ある面に対して、電気的なビームを当てることで、明るいところと暗いところを作ると、 それによって1と0を表現しようというものでした このウィリアムス管では、縦に32個、横に 32個の点を表現できるということで、 32×32、あわせて1024ビットを表現することができました このウィリアムス管を合わせて4個使うという計算機です 1つ目は計算に必要な処理やデータを置くためのメモリですね 2つ目が計算結果を一時的に取っておくためのアキュムレータ 3つ目は実行する命令と計算処理に使うデータ、  オペランドのアドレスを取っておきます
(11:17) そして、4つ目は記憶装置ではなくて、 出力装置として機能するもので、 この3つの中から 一つを選んで その状態を表示することができるというためのものです この中で実行される命令は、2進数の0と1で表現されるわけですが、 それを入力するのがこちらの入力装置です 実際には32個のスイッチが用意されていて、 それをカチッカチッと切り替えることで 32ビットの0と1をコンピューターの中に格納できたというわけですね そして、ここから入力した情報をメモリから読み込んだり、 またはアキュムレータの情報を読み書きしながら処理を進めることによって 計算を行なっていました このように Manchester Baby ではパンチカードを使って データを入力するということは行われていませんでした じゃあ、この32ビットの情報は いったいどんなデータを入力していたのかというと、 この下の図のようなイメージですね 最初の13ビット、1番から13番までで オペランドのアドレスを表現して 次の3ビットで処理内容を表現する
(12:14) 残りの16ビットは未使用というのがこの32ビットの中身です 例えば、 今のアキュムレータの値から10を引き算したい そんなときはまず10という値をメモリに読み込ませておいて、 そこのアドレスを最初の13ビットで指定します そしてここの3ビットで引き算するという処理を指定する イメージですね じゃあ、このコンピュータで いったいどんな処理ができるんだろうというと、 ここの部分 ここでどんな処理を指定できるかによって 何ができるのかが分かります 処理は3ビットで指定するので、2x2x2 で最大8種類の処理を指定できるわけですが、 全部見てもらうとこんなふうになってます 全体的にマイナスとか引き算に関する命令が多いんですが、 これは算術演算を行なう回路として、 引き算と符号の反転しか用意されていなかったためです というのも、足し算は引き算 符号の反転で表現することができるんですね なので、足し算をするための回路は、そのときは不要だとみなされていました
(13:10) 例えば、x+y という計算はこんなふうに置き換えられるイメージです そしてコンピューターに与える処理は、 最初はこのように0と1で表現されていたんですけど、 もっと分かりやすくということで、 こんなふうに記号を使った表現に変わっていきました そして、ここの青文字の部分、 これはコンピューターに対してこういう処理をしてくださいという 指示を文字を使ってまとめたものですよね これがプログラミング言語です 言語というのは、 一定の決まりに従って、 音声や文字を並べて意味を表すものをいいます この青文字の部分は、 それぞれコンピューターへの指示を文字で表現したものですよね そして、コンピューターへの命令を2進数のビット列 あるいは16進数で記述したものを 機械語 と言います そして、もっと分かりやすくしようということで、 0と1の機械語を記号を使って置き換えたものを アセンブリ言語 と言います この assembly というのは、組み立てまたはその部品という意味の英単語ですね
(14:10) この頃は、アセンブリ言語を使って処理を組み立てる人と この記述を0と1に置き換えて実行するような人もいました 今でいうコンパイラーの職種があった時代ですね そして、アセンブリ言語は機械語と深く結びついているので、 コンピューターごとにばらばらの書き方が存在していました これだと大変なので、色んなコンピューターで共通した書き方ができるように、 そしてもっと人にとって 分かりやすくという方向性で、 新しい言語が開発されていきます そうやって生まれたのが高水準言語または高級言語ともいうものですね これは人がよく使うような抽象的な表現を書ける言語で コンピューターの処理装置、プロセッサーに依存しない書き方ができます まさにこんなイメージで、消費税の金額(TAX)=商品の価格(PRICE)x0.1 ということで、 計算式をそのままプログラムに書けちゃう こんなイメージです じゃあ具体的にどんな言語が出てきたのかっていうことで、 さっきの年表に戻って確認をしていきましょう
(15:11) プログラミング言語の歴史としては、 まず機械語が生まれて、 この0と1の表現を記号に置き換えた アセンブリ言語が使われるようになっていきます そして、時代の流れで言うと、プログラミングが生まれた頃は 0と1の機械語を使って行なわせたい処理を記述していました そこからセンブリ言語、そして高水準言語へと進んでいくんですが、 この前の部分、この辺りのプログラミング言語は 高水準ではない言語という意味合いで、 低水準言語と呼ばれることもあります そして、世界初の高水準言語が、1954年から開発された アメリカIBMのジョンバッカスたちが作ったFORTRANという言語です この名前は、formula translation 数式の変換から由来しています 科学技術計算用のプログラミング言語ですね そして、FORTRANで作ったプログラムを機械語に変換する為のプログラム つまりコンパイラーも1957年に完成しました コンパイラーが出た当初は人の手で変換するよりも 処理が遅いんじゃないかって思われたりもしたんですけど、
(16:20) 実際は命令の数を20分の1ぐらいに削減できるっていう効果があって、 急速に使われるようになっていきました このFORTRANは改良が加えられていて、 今でもスーパーコンピューターで使われていたりもします そして、このアメリカの言語に対抗して、 ヨーロッパの研究者達が開発したのが ALGOL です 1958年に国際会議で提案された言語なんですが、 1960年にFORTRANを開発した ジョンバッカスを加えた会議があって、 そこで ALGOL60 に改良されます この ALGOL60 はこの後、多くのプログラミング言語に影響を与えた 先駆者的な言語だと言われています この ALGOL に刺激を受けて、 アメリカの認知科学者ジョンマッカーシーが設計したのが LISP です LISPは1958年に開発をスタートして 1960年に発表されました LISPという名前は list processor から来ています LISPのプログラムは リストという構造でできていて、 このデータ構造がすごく人工知能との相性がいいんですね
(17:22) 開発者のジョンマッカーシーは初めて人工知能という言葉を使った人物で、 まさに人工知能研究の第一人者です このLISPも将来の言語に影響を与えることになります そして、同じ時期の1959年に事務処理用の言語として開発されたのがCOBOLです この名前は COmmon Business Oriented Language 共通した事務処理用の言語という英語の頭文字を取ったものですね 銀行のような特に金融系のシステムでは、 今もよくCOBOLのプログラムが動いています このCOBOLを開発したのは、 グレースブリュースターマレー ホッパーという人物で、 アメリカの計算機科学者かつ海軍の軍人でもある人です グレースホッパーがコンピューターを使っていたときに あるとき、 そのコンピューターに蛾が挟まって コンピューターが動かなくなっちゃったときがあります その日の作業日誌にグレースホッパーは、その蛾を貼り付けてこう書きました
(18:21) これがコンピューターで起きた初めてのバグです bug は本来虫という意味ですが、 これをきっかけにプログラムの不具合を指す言葉として使われるようになりました ちなみにこのグレース ホッパーは、 COBOLの母とかコンピューター？？？という愛称で呼ばれたりもしています ちなみに、この？？？の6文字にはどんな言葉が当てはまるでしょう？ はい、正解はコンピューター おばあちゃんですね 頭の中にあの音楽が流れてくる人は僕と同じ世代かもしれませんね この時代で最後に紹介したいのが1964年に誕生したBASICです この名前は Beginners' All-purpose Symbolic Instruction Code の頭文字を取ったものです アメリカのダートマス大学で、 数学者のジョンケメニーとトーマスカーツが教育目的に開発した言語ですね プログラムの書き方は FORTRANによく似ています 初期のBASICでは、 行番号と 処理を組み合わせてプログラムを作るという構成になっていました
(19:24) そして、この言語教育目的に作られたということで、 開発者の二人もこれでお金儲けをしようというような考えは全くなく、 特許なども取得することはしませんでした この自由に使ってOKですよというスタンスがあったことで、 このBASICは爆発的に普及します ただ、実はこの考え方がこの先大きな問題を生んでしまうことになるんですね というのも、いろんなメーカーが このBASICにいろんな独自機能を追加していきました そうすると、あるコンピューターで動くBASICのプログラムが 別のコンピューターでは全然動かない こんなケースが出てきちゃったんですね というわけで、このBASICをきっかけにプログラムの仕様や書き方、 これを管理する団体って必要だよねっていう考え方が生まれていくことになります このようにプログラミング言語の開発が進んだことで、  他にも大きな問題が出てきました というわけで、ここでまたクイズです BASICが誕生してから4年後、 1968年に開かれたNATO(北大西洋条約機構)の国際会議の中で
(20:21) ソフトウエア危機として宣言された内容は次のうちどれでしょう？ ここまで見てきた高水準言語の時代では、表現力を向上する方向性、 つまりプログラムをいかに人にとって分かりやすい書き方で表現するか、 これが追求されました さらに、1960年代に入ると、ハードウェアが発達して、 それまでパンチコードでデータを入力していたのが マシンに直接文字を入力したり、 それをENTER キーを押してコンピューターに送信できるようになっていきました そうすると、コンピューターに処理してほしいことの要求が上がる プログラムの規模が大きくなる プログラムを毎回0から作り直していたら間に合わないということが 起こり始めたんですね というわけで、さっきのクイズの解答はこちら 20世紀末には世界の総人口がプログラマーになったとしても、 ソフトウェアの需要に追いつかないというようなことが ソフトウエア危機として宣言されました この時代に入ると、既存のプログラムに修正を加えて対応するという ケースが増えていくんですが、当時全然うまくいかなかったんですね
(21:24) それはどうしてか この頃はメモリの容量とか、CPUの速度といったような ハードウェアがまだ貧弱だったので、 1バイトでも小さく、1ステップでも短いプログラムが推奨されていました なので、中にはプログラムの10行目から100行目に飛んで すぐまた50行目に飛ぶみたいな結構トリッキーなコードも多かったんですよね このようなプログラムは処理の流れが複雑に絡まっていて、 全然整理されていないコードということで、 ある食べ物に例えて何とかコードと呼ばれることがあります さあ、これ何の食べ物でしょう？ これは聞いた ことがあるっていう人もいるかもしれませんね 正解は スパゲッティーコードです こういう処理が絡まってるコードって 他の人が見た時に処理を改善したりとか、 メンテナンスをするのがすごく難しいんですよね というわけで、この頃から広まっていくのが 構造化プログラミングという考え方です 正しく動くプログラムを作るには、 わかりやすい 構造にすることが大切であるということで、
(22:25) 構造化言語というものが広まっていきました この構造化言語では、 この3つの構造を組み合わせることでプログラムを組み立てていきます 1つ目の順次進行は、 上から順番に処理を実行していくという処理構造ですね この例では、商品の値段を足し算して変数priceのpに代入する そしたら300に0.1を掛けて消費税のtax、これを計算します そしたら、価格と税額を足し算して合計金額 sum を求めると いうようなイメージですね さっき挙げた例のように、処理が急に100行目に飛んだりとか、 50行目に戻ったり、こういうことはやめましょうという考え方です 2つ目の条件分岐は、プログラムの中である条件を元にして 処理を切り分けることができるという構造です この例では、税込み金額が1 000円以上の場合は×0.9、 つまり1割引をするというような計算処理を行っています 最後の繰り返しは同じ処理をぐるぐると繰り返すという構造ですね この例では、100円の商品を5つ 購入した場合、 +100の処理を5回グルグルと繰り返すというような処理を行っています
(23:30) この3つの構造を組み合わせて処理を組み立てていく このような考え方を構造化プログラミングといいます そして、この考え方と合わせて、 もう一つプログラムの構造を分かりやすくするために 関数の独立性が上がっていきました まず関数というのは、サブルーチンとかプロシージャとも呼ばれるもので、 プログラムの中でよく使う処理を 別のところに切り出してまとめておくものですね そして、他のところから呼び出して使うことができるというのが、 この関数のイメージです 昔のプログラムは、ある処理からよく使うデータを変数として取っておいて 関数の中からもそのデータを読み取って使うと いうようなことを行っていたんですが、 もしこのデータの変数名とか、 データの形などに修正が起こってしまうと、 元のプログラムとか関数の中、 いろんなところに影響が出てしまうんですね なので、呼び出し側と呼び出される側の間で 共有するデータをできるだけ減らそうと、
(24:23) つまり、この2つがそれぞれ独立して動けるようにしようということで、 この2つの間でデータのやり取りができるようになっていきました 例えば、この関数の処理として、 価格に対して 税込みの金額を計算するような計算処理を書いておくと、 これを呼び出し元から呼び出すときに300を渡してあげると330が返ってきて、 1000を渡すと1100が返ってくる こんなイメージですね これは当初はプログラムのサイズが大きくなったりとか、 処理の速度が遅くなっちゃうという批判もあったんですけど、 ハードウェアの能力が上がってきたことで プログラムの分かりやすさを優先しようということで 幅広く使われていくようになりました さっき出てきたFORTRANやCOBOL、BASICも この後言語仕様が改訂されて 構造化言語の3つの構造を記述できるようになりました こんな流れの中、1970年に発表された構造化言語がPascalです Pascalを開発したのは、スイスの計算機科学者ニクラウスヴィルトです ALGOLをベースにして、シンプルかつ整った構文を持つ言語ですね
(25:26) というのも、 ニクラウスヴィルトが1951年からヨーロッパで初めて プログラミングの講座を開いていた人物だというのもあって、 教育することも意識して、プログラムの読みやすさを重視したとも言われています 1975年の『アルゴリズム＋データ構造＝プログラム』 これは当時広く読まれた著書ですね そして1972年、AT&Tベル研究所のデニスリッチーが 主体となって開発した言語がC言語です AT&Tというのは、American Telephone & Telegraph の頭文字を取ったもので、 グラハムベルが作ったアメリカの情報通信会社です このC言語は初期のオペレーティングシステム UNIXの開発に使われた言語として有名ですね ただ、本当の順序としては まずケントンプソンとデニスリッチーがUNIXを開発しました このとき、最初はアセンブリ言語で記述されています そしてこのUNIX上で動くアプリケーションを開発するために、 トンプソンがまずB言語を開発します
(26:26) ただこの言語、ちょっと動作が遅かったんですね そこでデニスリッチーがC言語に改良したという経緯があります その後、1973年にUNIXをアセンブリ言語からC言語に書き換えたわけですね この先いろんな言語が出てきますが、 今でもC言語は家電とかロボットをコントロールするような 組み込みシステムで使われていたりします 続いて、同じ時期に作られた特徴的な言語を2 紹介します 1つ目が1972年に開発されたPrologです Prologという名前は、Program in logic から来ているものですね この名前の通り、論理型プログラミング言語の代表格です 自然言語の解析や人工知能の分野で使われている言語ですね 例えば、コンピュータにaさんは楽曲sが好き 楽曲sにはこのようなコード進行が含まれているという情報を与えておきます この状態でaさんが好むコード進行を教えて と質問すると、そこで処理がスタートするイメージです
(27:25) 僕は2000年代の前半、大学院で人工知能の研究をしてたんですが、 その当時でもこのPrologを使って 人の好みを学習して自動作曲するシステムを作っていました 今は人工知能と言えばPythonが使われるケースが多いですが、 このPrologもとても長く人工知能の分野で使われた言語です そしてもう一つ この時期に作られた特徴的な言語にSQLがあります SQLは、表形式の関係データベースに対して、 データの定義や操作を行うための言語です 1974年から使われるようになって、 その後データベースごとにいろんな拡張機能が実装されたんですが、 この 2年後、1976年に書き方が統一された言語です プログラムの中でデータベースにアクセスしたい そんなときにSQLの記述が使われるので、 他のプログラミング言語と併せて使われることが多いですね ちなみにSQLは Structured Query Language の頭文字を取ったもので、 実際SQLと読むことが多いですが、
(28:24) 国際基準としてはSQLは何かの略語ではないというふうに定義されていて、 SEQUELと読まれることも多いです というのも、もともとは SEQUEL、この単語を使いたかったんですが、 商標の問題で駄目だったので、 SQLという名前にしたというふうに言われています 読み方だけが今も残っているというわけですね というわけで、この時代もいろんな言語が出てくるんですが、 この流れの中で、次第にオブジェクト指向という考え方が広まっていきます オブジェクト指向の話に入る前に、ここでまたクイズです 世界で最初のオブジェクト指向の言語が発表された年に 日本で起きたことは何でしょうか ちょっと難しいですかね ヒントで年号も表示します それでは、解答はこの後の本編で説明します 構造化言語を使うことで、 プログラムをだいぶわかりやすく書けるようにはなってきたんですが、 1968年のソフトウエア危機 これを解決するにはまだ不十分でした
(29:23) というのも、この構造化言語 2つの大きな問題を抱えていたんですね 1つ目はグローバル変数の問題です この頃、一つのプログラムがどんどん大きくなっていく傾向にありました この長いプログラムの中で、変数をたくさん作って それぞれ必要なデータを管理するわけですね 逆にいうと、このデータというのは、 プログラムのいろんな場所で使われているということなので、 もしこのデータに関して何らかの修正を加えたいとすると、 プログラムのいろんなところに影響が出てきちゃいます つまり、データひとつ修正するだけでも本当に修正して問題ないか それを全て確認する必要があるので、ものすごく大変になっちゃうんですね これはプログラムに求められる機能が増えるほど、つまり サイズが大きくなるほど問題が深刻化していきます そして、もう一つの問題として、 構造化言語の仕組みだけでは、再利用性が貧弱過ぎるというものがありました ここで再利用できるのは、 元々のプログラムから処理の一部を抜き出して作った この関数の部分だけなんですね つまり、せっかくいろんなプログラムを作っても、 処理の一部しか再利用できていないということで、
(30:22) これを何とかできないかということで、これらを打ち破ったのが 下のオブジェクト指向という考え方です オブジェクト指向言語では、属性と操作をクラスという形でまとめることで プログラムを組み立てていきます 属性というのは、そのクラスが持つ データ 操作というのは、そのクラスでできる処理 つまり、データと処理をひとまとめにして扱っていこうという考え方ですね オブジェクト指向の特徴はこの3つです 1つ目のカプセル化は、まさに属性と操作をクラスにまとめること つまりカプセルとしてひとまとめにして扱おうという考え方です 例えば、ShopRegクラス、お店のレジを表わすクラスとして、 この中には taxRate、消費税の税率というデータと calcSum()という処理、税率を基にして税込み金額を求めるための 処理をまとめた関数のようなものだと思ってください そして、ShopRegクラスを使うときにはデータにアクセスするんじゃなくて、 下の処理を呼び出すようにするというように プログラムを組み立てていきます
(31:24) そういうふうにプログラムを組み立てておくと、 もしtaxRate、データを修正したとしても、 その影響範囲がこのクラスの内側だけで収まるんですね なので、再利用性が上がるというメリットがあります 2つ目の特徴が継承というもので、 これが言葉の通り、元々あるクラスを継承 つまり、受け継いで新しいクラスを簡単に作れる仕組みです 例えば、ShopRegクラスのデータと処理 これをそのまま引き継いで新しくDiscountRegクラスを作る この中には独自の処理、例えば価格が1000円以上なら1割引するというような 処理だけ記述して新しいクラスを作れる仕組みです この継承も新しいプログラムを作りやすくするということで、 再利用性の向上につながると言えます オブジェクト指向の考え方を持つ最も古い言語が Simula です Simula は、ノルウェーのクリステン二ガードと オルヨハンダールが ALGOL を拡張して設計しました
(32:21) 名前の Simula はシミュレーション言語を表す simulation languageと 簡潔な汎用言語という意味の simple universal language の 2つに由来しています そして、この言語いつ作られたのかというと、1967年です なので、実は構造化言語が出てくるよりも前だったんですね というわけで、さっきのクイズは自動改札機が正解でした これは結構難しかったんじゃないかなと思います この当時はまだオブジェクト指向という言葉はありませんでした それでも Simula にはクラスや継承といったような オブジェクト指向の概念が盛り込まれていたんですね そんなわけで すごく画期的な言語だったんですが、ただ時代の先を行きすぎたのかもしれません それとノルウェーという北欧圏で生まれたこともあって、残念ながら この Simula は広く普及することはありませんでした そして、オブジェクト指向という言葉を使い始めたのがアランケイです 1972年から Simula の概念を土台にして新しい言語を開発します
(33:24) そして1980年、Smalltalk という名前で発表されました あわせて、完成済みのクラスも クラスライブラリという形で豊富に提供されました それもあって、オブジェクト指向プログラミングの手本 というふうにも呼ばれる言語だったりします まさにこの先出てくる いろいろなオブジェクト指向言語に多大な影響を与えた言語だと言われています そして1983年、AT&Tベル研究所によって開発されたのが C++ です C言語にオブジェクト指向の考え方を組み合わせた言語ですね C++ はオブジェクト指向言語として 複雑なアプリケーションを開発するのにも使えるし、 その一方でハードウェアを直接操作できる 低水準言語としても扱えるということで幅広く利用されていきます ちなみにこの言語、開発中は C with Classes と呼ばれてたんですけど、 C言語で値を一つ追加するための演算子 インクリメント演算子から C++ という名前が付けられました 同じくC言語をベースにして、 Smalltalk のオブジェクト指向の機能を追加したのが Objective-C です
(34:32) 当初はマイナーな存在だったんですが、 アップル社が Objective-C の権利を持つ会社を買収したんですね それをきっかけに、今はMacOSやMacOS上で動作する アプリケーションの開発で利用されています 同じように Pascal にオブジェクト指向の考え方を導入したのが Object Pascal です これは今でも Delphi という開発環境なんかで使われている言語です このように1980年代に入ってから たくさんのオブジェクト指向言語が出てきました そうなると、時代の先を行きすぎたこの SImula ノルウェーのクリステン二ガードとオルヨハンダール、 この二人が不遇だなと感じる人もいるかもしれませんが、 2002年の2月に  Simula によってオブジェクト指向を出現させたということが表彰されて 計算機科学分野のノーベル賞とも言われる チューリング賞をこの二人が受賞しています 当時は画期的なアイデアだったんですが、 この35年後に報われて本当に良かったですね
(35:29) そしてここから先、1990年代の中頃からインターネットが急速に成長します それによって、また新しい言語が誕生していきました まず、ラリーウォールによってUNIX上で動く スクリプト言語として開発されたのが Perl です スクリプト言語という言葉には、実は 明確な定義はないんですが、 script は台本とか脚本という意味の英単語です プログラムを比較的簡単に書けるような 簡易的なプログラミング言語のことを全般的にスクリプト言語と言います この Perl は1987年に公開されたんですが、 CGIのプログラムを作るために広く使われるようになりました 僕たちがwebページを見るときは、 webブラウザからwebサーバに対して こういうページを見たいですというリクエストを送るんですが、 CGIというのはwebブラウザからのリクエストに応じて、webサーバ側で何らかの処理をする仕組みのことをいいます 具体的には、掲示板とかアクセスカウンタ、 アンケートフォームの入力受付の処理によく使われていました
(36:31) 同じくこの時期、 1991年に公開されたスクリプト言語が Python です できるだけ簡単に読みやすく、 効率がいいプログラムを書こうという価値観の言語ですね なので Python の本体も、シンプルで基本機能しか用意されていません 専門的な機能はライブラリとして提供されているので、 必要な機能をダウンロードして追加する仕組みになっています ここ最近は、1位2位を争う人気の言語ですけど、 発表当初からすぐ人気になったという訳ではありませんでした データ分析や人工知能のライブラリが豊富なので 今のニーズに合う言語としてよく使われるようになってきています 例えば、人の好みとか行動データを分析しておすすめのコンテンツを 示すことができたりするので、YouTubeとかInstagram、 他にもAmazon、facebook、Netflix、Spotify なんかで使われている言語です 同じく1991年、 マイクロソフト社から Microsoft Visual Basic が発表されました
(37:31) 略してVBと呼ばれたりもしますね これはWindows用のGUIアプリケーションを開発できる言語です まず、デザイナー画面でフォームの上に ボタンやテキストボックスなどの部品をマウスで配置していきます 次に、ボタンが押されたといったようなイベントが発生したときに、 どういう処理をしたいのか、それをコードで記述していきます この言語でいろんなWindowsアプリケーションが作られていきました 続けて1993年、 マイクロソフト社から Visual Basic for Applications VBAを搭載した Microsoft Excel がリリースされます そしてすいません ここの数字、正しくは1993ですね あわせて修正させてください VBAは Word や PowerPoint といった Officeソフト全体に搭載されたので、 いろんな処理が自動化できるようになりました 今でも表計算マクロの言語としてよく使われていますね さらに、2年後の1995年、 アメリカのサンマイクロシステムズ社が Java を発表しました
(38:33) 本格的なオブジェクト指向言語のひとつで、僕が個人的にすごく好きな言語です これまでサンマイクロシステムズ社認定のJava講師として、 いろんな企業や官公庁、大学などに行って Java を教えてきました ただ、2010年からはオラクル社がサンマイクロシステムズ社を吸収合併したので、 今はオラクル社が Java を管理しています 特徴はプログラミング言語と実行環境、 さらに開発環境も含めて Java というくくりで提供されていることです 特に実行環境の部分がハードウェアとか OSの違いを吸収してくれるというのがあって、 Write once, run anywhere、1度作った Java プログラムは どこでも動かせるというのがアピールポイントでした Java はもともと家電製品を制御するための 組み込みシステム用の言語として開発されたんですが、 当時webブラウザ上で動くJavaアプレット、 これが注目されて一気に広まりました
(39:24) Java はセキュリティ性が高いのと大規模のシステムを作るのに向いているので、 銀行やオンラインショッピング、 さらにクレジットカードのシステムなどで使われている一方で、 家電の中で動いている小さな組み込みシステムでも使われています そして、Java の仲間かな？と思われている言語が JavaScript です 当時、よく使われていた Netscape というwebブラウザを持っていた ネットスケープコミュニケーション社が1995年に開発した言語です Netscapeブラウザと組み合わせて動かそうという狙いで作られた言語で、 実は Java とは全く違う言語です 開発当初は LiveScript と呼ばれていたんですが、 当時注目を浴びていたこの Java にあやかったというのと、 ネットスケープコミュニケーションズ社とサンマイクロシステムズが 業務提携をしていたということもあって、 JavaScript という名前に変更されました webブラウザ上でプログラムが動くので、 例えばウェブページの画面上で入力情報を送信前にチェックしたり、
(40:22) SNSでwebページを再読み込みすることなく、新しい情報を読み込んだり、 いろんな場面で活用されている言語です あわせて同じ1995年に開発されたwebサーバ側で動く言語に PHP があります PHP はもともと Personal Home Page Tools から来ています 最初はラスマスラードフが 個人的に動きのあるwebページを作るために使っていたCGIのプログラムでした これをPHPツールズとして公開したら、利用者が急増したんですね そのとき利用者が多かったC言語や Java から PHP を学びやすかったというのもあります その後、PHPは Hypertext Preprocessor として今でもよく使われています 具体的にはWikipediaで動いている MediaWiki というシステムや webページを作るためのWordPressなどで使われていたりします そして、この時代に開発された言語は他にもたくさんあるんですが、  Perl で始まったこの時代の言語を最後はこれで締めたいと思います
(41:21) Ruby という言語です 今回唯一出てくる日本人のまつもとゆきひろさんが開発した言語で、 1993年から開発、 そして95年に発表されました 日本で開発されたプログラミング言語として 初めて国際規格として認められた言語です 開発者の松本さんが尊敬する人物は、Perl の開発者ラリーウォールということで、 Perl のように使えるスクリプト言語を 純粋なオブジェクト指向の言語として設計したと言われています ちなみに、Perl は真珠の Pearl と同じ発音です そして、真珠の Pearl は6月の誕生石 この Pearl に続きたいということで、 7月の誕生石であるルビーから名前が付けられました まつもとゆきひろさんは監修した 『Rubyプログラミング入門』の中でこう書いています Ruby には Perl や Python とは 決定的に違う点があり、 それこそが Ruby の存在価値なのです それは楽しさです Ruby は純粋に楽しみのために設計され、 言語を作る人、使う人、学ぶ人 すべてが楽しめることを目的としています
(42:26) 自分で作ったプログラムが動いた瞬間って楽しいですよね 今、プログラミングを学んでいる人には、 ぜひそういう楽しさを感じながら勉強を進めていってほしいなと思います この時代に入ると、新しく登場する言語は オブジェクト指向言語が大半を占めるようになりました そして、お互いの言語のいいところを取り入れながら、 それぞれの言語のアップデートが続いていきます さらに、多くのフレームワークが開発されていきました さっきはオブジェクト指向の特徴として、カプセル化、継承、 この2つを紹介しましたが、もうひとつ ポリモフィズムというものがあります これは多態性ともいわれる性質で、いろいろな形に変わる性質のことを言います 例えば左のプログラムから右上のクラスに対して calcという処理を呼び出すと、1000円が返ってくる 一方、右下のクラスに対して同じようにcalcという処理を呼び出すと、 今度は6.
(43:12) 5ドルという数値が返ってくる こんなふうに同じcalcという処理でも 呼び出す先によって結果がいろいろと変わる このようなプログラムの性質のことをポリモフィズムといいます これはちょっと難しい考え方なんですが、右上の関数と見比べてみましょう そうすると関数というのは、 呼び出される側の処理をそれぞれ共有することができる 言い換えると、呼び出す側が増えても 呼び出される側は変わらない仕組みということで、 よく使う便利な機能をまとめた ライブラリへとつながっていくわけですね それに対してポリモフィズムは呼び出す側を統一できる仕組みです つまり、呼び出される側が変わったとしても、 呼び出す側は変えなくていいということで、 この仕組みがフレームワークにつながっていきます framework は枠組みという意味の英単語ですね この図でいうと、この黒い部分がフレームワークです 例えば、webアプリケーションを作るとき、 どの画面を表示するときにもwebブラウザからのリクエストを受け取ったり、 レスポンスを返したりする処理
(44:17) ここの部分って共通しているんですね この共通する部分を全体の枠組み、フレームワークという形で作っておけば、 あとは画面ごとに必要な処理を それぞれ単独で作って当てはめて動かせばいいという考え方です このようなフレームワークがあることで、 効率化された処理をみんなで共有することができたり、 新しいアプリケーションを作るときにもコード量が格段に減る さらにこの部分は正しく動くことがわかっているので、 あまり詳しく知らない人でもコーディングやテストができる そんなたくさんのメリットがあります 特に大規模なシステム開発では、今はもう当たり前に使われる技術ですね Java では Spring や Spring Boot というフレームワークが使われていたり、 Ruby も Ruby on Rails というフレームワークとともに広まってきた部分もあります これからプログラミングの仕事をしていきたいっていう人は、 その言語でよく使われているフレームワークをあわせて知っておくといいでしょう
(45:09) 2000年以降に出てきた言語をいくつか紹介していくと、 1つ目は2000年にマイクロソフト社が発表した C# があります C++ に改良が加えられた言語で、.Net Framework という環境で動く言語です C++ をさらに1つ進めたものとして C++ ++、 +を4個くっつけて C# という名前になりました そして、2009年にグーグル社が発表したのが GO という言語です グーグル社のエンジニアによるプログラムの肥大化や複雑さを解消したい そんなプロジェクトがきっかけで、いろんな言語のいいところを取り入れて、 さらに批判されている問題を解決しようというコンセプトで開発されて、 具体的には Python や Ruby のように読みやすく書きやすい さらに Java や C++ のように大規模なシステムも開発できる そんなコンセプトで設計されました YouTubeのサーバとかCookPadのようなwebサービス、 さらにロボットやドローンの制御などにも使われています
(46:09) そしてすいません、また年号を間違えちゃってますね 2011年にJetBrains社から発表されたのが Kotlin です JetBrains社はもともと Java や Python、Ruby などの プログラミングの開発ツールを作って販売していた会社です そのノウハウを活かして、Java の実行環境上で動かすことができて、 さらにもっと少ないコード量で開発できる言語として Kotlin が作られました 今はAndroidアプリの開発に使われたり、 Java と組み合わせて使えるので、webサービスの開発にも使われています 例えば、Xなんかも Kotlin で書かれていたりしますね あわせてアップルのiOS上で動く アプリ開発に使われている言語として Swift があります Apple社で2010年から開発が始まって、2014年に発表されました Objective-C の特徴を引き継ぎつつ、新しい機能や書き方が追加された言語です
(47:02) というわけで、いろんな言語を紹介してきましたが、 ここまでがプログラミングの歴史の序章です えっ？て思うかもしれませんが、Manchester Baby で2の18乗の約数を計算してから まだ76年しか経ってないんですね きっとプログラミングの歴史はまだまだ続いていくんだろうと思います じゃあ、ここからはプログラミングの未来ということで、 ここで最後のクイズです これからのプログラミングは 一体どのような方向に進むと思いますか？ はい、きっと答えは人それぞれかなと思います それでいいというか、答えは誰にもわからないですからね ただ、大切なのは頭の片隅に未来のことをイメージしながら、 今目の前のことに全力で向き合うことかなと思います ここで僕が思うプログラミングの方向性、 プログラムの近い未来として3つのキーワードをお話ししておくと、 まず1つ目のキーワードはデータサイエンスです 最近は ChatGPT とか生成AIのように
(47:59) 人工知能の話題がすごく多いですけど、 この人工知能ってざっくり言っちゃうとデータ活用の一つなんですよね というのも、これまで蓄積してきた大量のデータを読み込んで、 それを組み合わせて学習した結果を人が望む形でアウトプットする これがAIです 今は買い物をする、スマホを使う、そして動画を見る もう何をするにしてもデータが取られている時代です そのデータが世界中のコンピュータや クラウド上にどんどん蓄積されているわけですね それをどう使うか、どう分析して次に生かしていくのか そんなデータサイエンスのスキルが今後求められていくと思います 2つ目のキーワードはリアルタイム性です 車の自動運転とかVR、ARの技術が進んでいて、 もう実用的なレベルまで来ています こういうシステムでは、目の前の情報をインプットして、 リアルタイムで次の動作の判断をしたり、 実際に動いたりする必要があります 処理の高速性と判断を間違えたら事故に繋がっちゃうケースもあるので、 処理の正確さもかなりハイレベルで求められます
(48:58) これはソフトウェア面に限らず、ハードウェア面でも ハイレベルなリアルタイム性が求められていくと思います そして3つ目のキーワードはノーコードです フレームワークの登場でエンジニアが書くコード量が格段に減りました 例えば、昔はウェブページを作るときに HTMLのタグとかCSSの記述をがりがり打ち込んで作ってたんですけど、 次第にHTMLとかCSSなんて全然知らなくてもwebページを作れちゃうような ツールやサービスが出てきましたよね これと同じようにプログラムを全く書かなくても アプリケーションを作れちゃう時代がやってくるんだと思います すでに海外では、ノーコードで定型的なアプリケーションを 作れるっていうツールが広がり始めてるんですね 新しいシステムの仕様情報を入力したら、瞬時にプログラムが出力される そんな未来も近いかもしれません ただそんな話をしちゃうと、プログラムを勉強する意味なんてあるの？ なんて思うかもしれないですね
(49:49) ただ、アレクサンドリアのヘロンがどうして人形を操る仕組みを作れたのか これは彼が蒸気や機械に関する知識があったからですよね そして、ジャカールがプログラミングできる機織機を発明した当時、 実は他にもたくさんの人が同じような機織機を作ろうとチャレンジをしてたんですね それでも完成できたのはジャカールだけでした それはきっと小さい頃からお父さんの仕事を間近で見ていて、 機織りの知識があったこと、 さらに周りに反対されても、作った機械が壊されても チャレンジを続けたからだと思います 今、プログラミングを学んでいる人達も、 その知識やスキルは必ず未来につながります なので、 ぜひこれからも楽しく勉強を続けていってくださいね！ というわけで、ここまで プログラミングの歴史と未来についてお話ししました 皆さんが好きなプログラミング言語や 他にもこんな言語があるよというのがあれば、 ぜひコメント欄で教えてください また、これからもこのような動画をバンバン作っていくので、 この動画が良かったっていう人は高評価ボタンや チャンネル登録で応援をよろしくお願いします
(50:48) それではまた、次の動画で会いましょう ありがとうございました！ 勉強は分かるとおもしろい！ 一緒に楽しく勉強しよう！